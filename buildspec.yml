version: 0.2

phases:
  install:
  commands:
    - echo "Installing Composer..."
    - curl -sS https://getcomposer.org/installer | php
    - php composer.phar install --no-scripts

    - echo "Installing phpenv and PHP 8.1.0..."
    - curl -fsSL https://github.com/phpenv/phpenv-installer/raw/master/bin/phpenv-install | bash
    - export PATH="$HOME/.phpenv/bin:$PATH"
    - eval "$(phpenv init -)"

    - echo "Checking for php-build plugin..."
    - |
      if [ ! -d "$HOME/.phpenv/plugins/php-build" ]; then
        git clone https://github.com/php-build/php-build.git ~/.phpenv/plugins/php-build;
      else
        echo "php-build plugin already installed.";
      fi

    - phpenv install 8.1.0
    - phpenv global 8.1.0
    - phpenv rehash

    # Check PHP configuration paths
    - php --ini

    # Disable OPcache and increase memory limit in the correct php.ini
    - echo "Disabling OPcache and increasing memory limit..."
    - php_ini_path=$(php --ini | grep "Loaded Configuration File" | awk '{print $4}')
    - echo "opcache.enable=0" >> $php_ini_path
    - echo "memory_limit=2G" >> $php_ini_path

    # Enable swap memory
    - sudo fallocate -l 2G /swapfile
    - sudo chmod 600 /swapfile
    - sudo mkswap /swapfile
    - sudo swapon /swapfile

  pre_build:
    commands:
      - composer clear-cache
      - composer install --prefer-dist --no-scripts --no-plugins
      - echo "Running pre-build commands"
      - cp .env.example .env # Copy environment file
      - php artisan key:generate # Generate application key
      - echo "Pre-build commands completed"

  build:
    commands:
      - echo Build started on `date`
      - php artisan config:clear

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing Docker image to ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPOSITORY_URI
      - docker build -t $REPOSITORY_URI:latest .
      - docker push $REPOSITORY_URI:latest
      - printf '[{"name":"backend-repo","imageUri":"%s"}]' $REPOSITORY_URI:latest > imagedefinitions.json
      - cat imagedefinitions.json

artifacts:
  files:
    - '**/*'
    - imagedefinitions.json

cache:
  paths:
    - vendor/**/*
